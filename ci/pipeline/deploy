@Library('infraJenkinsLibrary') _

def agent_name = ''
def STACK_NAME = ''
def COMPOSE_PATH = ''
def COMPOSE_FILE = ''

pipeline {
    agent none
     parameters {
         choice(name: 'TARGET_ENV', choices: ['ci', 'func', 'func-turva', 'sit', 'sit-turva', 'uat', 'uat-turva'], description: 'Deploy to environment')
         string(name: 'TAG', description: 'Docker image tag to deploy', defaultValue: 'latest')
         string(name: 'GIT_ID', description: 'Git branch or commitID for compose file', defaultValue: 'main')
    }

    stages {
        stage('Set variables') {
            steps {
                script {
                    switch("${TARGET_ENV}") {
                        case "ci":
                        case "func":
                        case "func-turva":
                        case "sit":
                        case "sit-turva":
                            agent_name = 'devtest'
                            break
                        case "uat":
                        case "uat-turva":
                            agent_name = 'uat'
                            break
                        default: 
                            error("No agent defined for ${TARGET_ENV}")
                            break;
                    }
                    STACK_NAME = "complex-app-${TARGET_ENV}"
                    COMPOSE_PATH = "docker"
                    COMPOSE_FILE = "docker-compose-${TARGET_ENV}.yaml"
                }
            }
        }
        stage('Check parameters') {
            steps {
                script {
                   if (GIT_ID.length() == 0) {
                      error("GIT_ID must not be empty")
                   }
                   if (TAG.length() == 0) {
                      error("TAG must not be empty")
                   }
                }
            }
        }
        stage("Set build information") {
            steps {
                script {
                    currentBuild.description = "Env: " + "${env.TARGET_ENV}" + "\nTag:\n" + "${env.TAG}"
                }
            }
        }

        stage('Check out correct git branc/commit & Prepare image and compose for deployment') {
            agent { label "${agent_name}"}
            steps {
                checkout ([$class: 'GitSCM',
                    branches: [[name: '${GIT_ID}' ]],
                    userRemoteConfigs: [[
                    credentialsId: 'azure_git', 
                    url: "${env.GIT_URL}"
                    ]]])
                prepareDeployment(stack: "${STACK_NAME}", 
                    composeFile: "${COMPOSE_PATH}/${COMPOSE_FILE}", 
                    tagToEnvironment: "${TARGET_ENV}", 
                    serviceTags: ['complex-app': "$TAG"])
            }
        }
        stage('Deploy service') {
            agent { label "${agent_name}"}
            steps {
                sh "docker stack deploy -c /compose/${STACK_NAME}/${COMPOSE_FILE} ${STACK_NAME}"
            }
        }
    }
}
